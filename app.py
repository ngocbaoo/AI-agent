import streamlit as st
from graph import app
from langchain_core.messages import HumanMessage, AIMessage
from PIL import Image, ImageOps
import io, base64
from tools import trademark as search_tools 

st.set_page_config(page_title="Tr·ª£ l√Ω AI T∆∞ v·∫•n SHTT", page_icon="‚öñÔ∏è", layout="wide")
st.title("‚öñÔ∏è Tr·ª£ l√Ω AI T∆∞ v·∫•n S·ªü h·ªØu tr√≠ tu·ªá")

if "messages" not in st.session_state:
    st.session_state.messages = []
if "analysis_done" not in st.session_state:
    st.session_state.analysis_done = False

def file_to_b64jpeg(uploaded_file):
    uploaded_file.seek(0)
    raw = uploaded_file.read()
    img = Image.open(io.BytesIO(raw))
    img = ImageOps.exif_transpose(img).convert("RGB")
    img.thumbnail((512, 512))
    out = io.BytesIO()
    img.save(out, format="JPEG", quality=85)
    return "data:image/jpeg;base64," + base64.b64encode(out.getvalue()).decode("ascii")

def _strip_data_url_prefix(s: str) -> str:
    if s and s.startswith("data:"):
        return s.split(",", 1)[1]
    return s

if not st.session_state.analysis_done:
    st.info("B∆∞·ªõc 1: Cung c·∫•p th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch ban ƒë·∫ßu.")
    with st.form("product_form"):
        st.subheader("H·ªì s∆° S·∫£n ph·∫©m")
        product_name = st.text_input("T√™n s·∫£n ph·∫©m/nh√£n hi·ªáu d·ª± ki·∫øn", "Panasonic")
        description = st.text_area("M√¥ t·∫£ ng·∫Øn v·ªÅ s·∫£n ph·∫©m", "")
        market = st.selectbox("Th·ªã tr∆∞·ªùng m·ª•c ti√™u", ["EU", "US", "VN", "WIPO"])
        filter_by_nice = st.checkbox("L·ªçc theo Nh√≥m Nice", value=False)
        nice_class = st.number_input("Nh√≥m Nice d·ª± ki·∫øn", min_value=1, max_value=45, value=5, step=1) if filter_by_nice else None

        # NEW: Uploader logo (in-RAM)
        logo_file = st.file_uploader("Logo (t√πy ch·ªçn) ‚Äî PNG/JPG", type=["png", "jpg", "jpeg"])
        user_logo_b64 = None
        if logo_file is not None:
            user_logo_b64 = file_to_b64jpeg(logo_file)   
            search_tools.USER_LOGO_B64_CTX = user_logo_b64
            payload = _strip_data_url_prefix(user_logo_b64)
            st.image(
                Image.open(io.BytesIO(base64.b64decode(payload))),
                caption="Logo ng∆∞·ªùi d√πng (preview)",
                width="stretch",)

        submitted = st.form_submit_button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch")

        if submitted:
            initial_prompt = f"""
            H√£y ph√¢n t√≠ch r·ªßi ro s·ªü h·ªØu tr√≠ tu·ªá cho h·ªì s∆° s·∫£n ph·∫©m sau ƒë√¢y.
            B·∫Øt ƒë·∫ßu b·∫±ng vi·ªác s·ª≠ d·ª•ng c√°c c√¥ng c·ª• tra c·ª©u, sau ƒë√≥ tham kh·∫£o lu·∫≠t ph√°p ƒë·ªÉ ƒë∆∞a ra m·ªôt b√°o c√°o chi·∫øn l∆∞·ª£c ho√†n ch·ªânh.
            H√£y nh·ªõ r·∫±ng tham kh·∫£o ƒëi·ªÅu lu·∫≠t n√†o ph·∫£i tr√≠ch d·∫´n ƒëi·ªÅu kho·∫£n s·ªë ... v√† s·ªë hi·ªáu vƒÉn b·∫£n (v√≠ d·ª• ƒêi·ªÅu 8 Ngh·ªã ƒë·ªãnh s·ªë 65/2023/Nƒê-CP)

            H·ªí S∆†:
            - T√™n: {product_name}
            - M√¥ t·∫£: {description}
            - Th·ªã tr∆∞·ªùng: {market}
            - Nh√≥m Nice: {nice_class if nice_class else 'Kh√¥ng x√°c ƒë·ªãnh'}
            - Logo_b64_present: {"yes" if user_logo_b64 else "no"}
            """
            st.session_state.messages.append(HumanMessage(content=initial_prompt))

            with st.chat_message("ai"):
                with st.spinner("Agent ƒëang ph√¢n t√≠ch..."):
                    message_placeholder = st.empty()
                    full_response = ""
                    stream = app.stream({"messages": st.session_state.messages})
                    for chunk in stream:
                        node = list(chunk.keys())[0]
                        if node == "agent" and chunk["agent"]["messages"][-1].content:
                            content = chunk["agent"]["messages"][-1].content
                            full_response += content
                            message_placeholder.markdown(full_response + "‚ñå")
                    message_placeholder.markdown(full_response)
                    if full_response:
                        st.session_state.messages.append(AIMessage(content=full_response))
                        st.session_state.analysis_done = True
                        # xo√° b·∫£n sao b64 kh·ªèi state sau khi ph√¢n t√≠ch xong (RAM hygiene)
                        user_logo_b64 = None
                    else:
                        st.error("Agent kh√¥ng th·ªÉ ho√†n th√†nh ph√¢n t√≠ch. Vui l√≤ng ki·ªÉm tra l·∫°i.")
