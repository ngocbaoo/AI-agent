import streamlit as st
from graph import app
from langchain_core.messages import HumanMessage, AIMessage
import base64
import contextlib
import io

def get_image_base64(uploaded_file):
    if uploaded_file is not None:
        bytes_data = uploaded_file.getvalue()
        base64_encoded = base64.b64encode(bytes_data).decode()
        return base64_encoded
    return None

# --- S·ª¨A L·ªñI 1: C·∫≠p nh·∫≠t CSS m·∫°nh m·∫Ω h∆°n ---
st.markdown("""
<style>
    /* Nh·∫Øm ƒë·∫øn container markdown ch√≠nh */
    [data-testid="stMarkdownContainer"] {
        overflow-wrap: break-word;
        word-wrap: break-word;
        white-space: pre-wrap !important; /* Quan tr·ªçng: √°p d·ª•ng cho c·∫£ kh·ªëi code */
    }
    /* ƒê·∫£m b·∫£o c√°c th·∫ª con c≈©ng tu√¢n th·ªß */
    [data-testid="stMarkdownContainer"] * {
        overflow-wrap: break-word;
        word-wrap: break-word;
        white-space: pre-wrap !important;
    }
</style>
""", unsafe_allow_html=True)
# ------------------------------------------

# --- Thi·∫øt l·∫≠p Giao di·ªán v√† Tr·∫°ng th√°i ---
st.set_page_config(page_title="Tr·ª£ l√Ω AI T∆∞ v·∫•n SHTT", page_icon="‚öñÔ∏è", layout="wide")
st.title("‚öñÔ∏è Tr·ª£ l√Ω AI T∆∞ v·∫•n S·ªü h·ªØu tr√≠ tu·ªá")

if "messages" not in st.session_state:
    st.session_state.messages = []
if "analysis_done" not in st.session_state:
    st.session_state.analysis_done = False

# --- Giai ƒëo·∫°n 1: Hi·ªÉn th·ªã Form ---
if not st.session_state.analysis_done:
    st.info("B∆∞·ªõc 1: Cung c·∫•p th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch ban ƒë·∫ßu.")
    with st.form("product_form"):
        # ... (ph·∫ßn code trong form gi·ªØ nguy√™n) ...
        product_name = st.text_input("T√™n s·∫£n ph·∫©m/nh√£n hi·ªáu d·ª± ki·∫øn", "Adios")
        description = st.text_area("M√¥ t·∫£ ng·∫Øn v·ªÅ s·∫£n ph·∫©m", "Gi√†y th·ªÉ thao")
        market = st.selectbox("Th·ªã tr∆∞·ªùng m·ª•c ti√™u", ["EU", "US", "VN", "WIPO"])
        filter_by_nice = st.checkbox("L·ªçc theo Nh√≥m Nice", value=True)
        nice_class = st.number_input("Nh√≥m Nice d·ª± ki·∫øn", min_value=1, max_value=45, value=25) if filter_by_nice else None
        uploaded_logo = st.file_uploader("T·∫£i l√™n logo c·ªßa b·∫°n (t√πy ch·ªçn)", type=["png", "jpg", "jpeg"])
        submitted = st.form_submit_button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch")

        if submitted:
            logo_b64_string = get_image_base64(uploaded_logo)
            logo_info = f"- Logo Input: {'C√≥' if logo_b64_string else 'Kh√¥ng c√≥'}"
            initial_prompt = f"""
            H√£y ph√¢n t√≠ch r·ªßi ro SHTT cho h·ªì s∆° sau...
            H·ªí S∆†:
            - T√™n: {product_name}
            - M√¥ t·∫£: {description}
            - Th·ªã tr∆∞·ªùng: {market}
            - Nh√≥m Nice: {nice_class if nice_class else 'Kh√¥ng x√°c ƒë·ªãnh'}
            - {logo_info}
            """
            
            st.session_state.messages.append(HumanMessage(content=initial_prompt))

            with st.chat_message("ai"):
                log_stream = io.StringIO() 
                with st.spinner("Agent ƒëang ph√¢n t√≠ch, vui l√≤ng ch·ªù..."):
                    with contextlib.redirect_stdout(log_stream): 
                        # --- S·ª¨A L·ªñI 2: Th√™m m·ªôt d√≤ng log kh·ªüi ƒë·∫ßu ---
                        print("--- B·∫Øt ƒë·∫ßu phi√™n l√†m vi·ªác c·ªßa Agent ---")
                        # ------------------------------------------
                        stream = app.stream({"messages": st.session_state.messages})
                        message_placeholder = st.empty()
                        full_response = ""
                        for chunk in stream:
                            node_name = list(chunk.keys())[0]
                            if node_name == "agent" and chunk["agent"]["messages"][-1].content:
                                content = chunk["agent"]["messages"][-1].content
                                full_response += content
                                message_placeholder.markdown(full_response + "‚ñå")

                message_placeholder.markdown(full_response)
                
                log_output = log_stream.getvalue()
                if log_output:
                    with st.expander("üìÑ Xem Log ho·∫°t ƒë·ªông c·ªßa Agent"):
                        st.text_area("Logs", log_output, height=300)

                if full_response:
                    st.session_state.messages.append(AIMessage(content=full_response))
                    st.session_state.analysis_done = True
                    st.rerun()
                else:
                    st.error("Agent kh√¥ng th·ªÉ ho√†n th√†nh ph√¢n t√≠ch. Vui l√≤ng ki·ªÉm tra Log.")
            
# --- 3. Giai ƒëo·∫°n 2: Giao di·ªán Chat ---
if st.session_state.analysis_done:
    st.info("B∆∞·ªõc 2: B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c h·ªèi c√°c c√¢u h·ªèi ph√°p l√Ω li√™n quan ƒë·∫øn b√°o c√°o.")
    
    for message in st.session_state.messages:
        with st.chat_message(message.type):
            st.markdown(message.content)

    if prompt := st.chat_input("ƒê·∫∑t c√¢u h·ªèi ph√°p l√Ω..."):
        st.session_state.messages.append(HumanMessage(content=prompt))
        with st.chat_message("human"):
            st.markdown(prompt)

        with st.chat_message("ai"):
            with st.spinner("Agent ƒëang suy nghƒ©..."):
                # --- THAY ƒê·ªîI 2 (L·∫ßn 2): B·ªè ph·∫ßn hi·ªÉn th·ªã "thinking" ---
                message_placeholder = st.empty()
                full_response = ""

                stream = app.stream({"messages": st.session_state.messages})

                for chunk in stream:
                    node_name = list(chunk.keys())[0]
                    
                    if node_name == "agent" and chunk["agent"]["messages"][-1].content:
                        content = chunk["agent"]["messages"][-1].content
                        full_response += content
                        message_placeholder.markdown(full_response + "‚ñå")
                
                message_placeholder.markdown(full_response)
                if full_response:
                    st.session_state.messages.append(AIMessage(content=full_response))